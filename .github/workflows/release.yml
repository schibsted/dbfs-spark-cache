name: Create a release
on:
  release:
    types: [published] # Trigger when a release is published

jobs:
  check_licenses:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml" # Use pyproject in the root

      - name: Install development dependencies
        run: make setup

      - name: Run license check script to check for non-allowed dependencies
        run: make check-licenses

  release:
    needs: check_licenses # Make release dependent on license check approval
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Install tools
        run: |
          uv tool install tomlq

      - name: Validate project version format
        run: make validate-version # Only validate format, tag existence check is not needed here

      - name: Get project version and name
        id: get_version
        run: |
          VERSION=$(cat pyproject.toml | tomlq -jr .project.version)
          PACKAGE_NAME=$(cat pyproject.toml | tomlq -jr .project.name | tr '-' '_')

          echo "This is version v$VERSION of $PACKAGE_NAME."
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      # Tag and release creation are now handled by the `make release` command
      # which triggers this workflow.

      - name: Build package
        run: |
          if ! uv build; then
            echo "::error::Package build failed"
            exit 1
          fi

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # No API token needed here when using trusted publishing
        # Ensure you have configured trusted publishing in your PyPI project settings:
        # https://docs.pypi.org/trusted-publishers/adding-a-publisher/

permissions:
  actions: read
  id-token: write
  contents: write
